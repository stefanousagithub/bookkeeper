// Autogenerated code. Do not modify.
package org.apache.bookkeeper.clients.config;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.function.IntUnaryOperator;
import java.util.function.UnaryOperator;
import javax.annotation.Nullable;
import org.apache.bookkeeper.clients.resolver.EndpointResolver;
import org.apache.bookkeeper.common.util.Backoff;
import org.apache.bookkeeper.stats.StatsLogger;

/**
 * Auto-generated superclass of {@link StorageClientSettings.Builder}, derived from the API of
 * {@link StorageClientSettings}.
 */
abstract class StorageClientSettings_Builder {

  /**
   * Creates a new builder using {@code value} as a template.
   *
   * <p>If {@code value} is a partial, the builder will return more partials.
   */
  public static StorageClientSettings.Builder from(StorageClientSettings value) {
    if (value instanceof Rebuildable) {
      return ((Rebuildable) value).toBuilder();
    } else {
      return StorageClientSettings.newBuilder().mergeFrom(value);
    }
  }

  private enum Property {
    SERVICE_URI("serviceUri"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private int numWorkerThreads;
  private String serviceUri;
  private EndpointResolver endpointResolver;
  private boolean usePlaintext;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String clientName = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private StatsLogger statsLogger = null;
  private Backoff.Policy backoffPolicy;
  private boolean enableServerSideRouting;
  private final EnumSet<Property> _unsetProperties = EnumSet.allOf(Property.class);

  /**
   * Sets the value to be returned by {@link StorageClientSettings#numWorkerThreads()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder numWorkerThreads(int numWorkerThreads) {
    this.numWorkerThreads = numWorkerThreads;
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link StorageClientSettings#numWorkerThreads()} by
   * applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public StorageClientSettings.Builder mapNumWorkerThreads(IntUnaryOperator mapper) {
    return numWorkerThreads(mapper.applyAsInt(numWorkerThreads()));
  }

  /**
   * Returns the value that will be returned by {@link StorageClientSettings#numWorkerThreads()}.
   */
  public int numWorkerThreads() {
    return numWorkerThreads;
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#serviceUri()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code serviceUri} is null
   */
  public StorageClientSettings.Builder serviceUri(String serviceUri) {
    this.serviceUri = Objects.requireNonNull(serviceUri);
    _unsetProperties.remove(Property.SERVICE_URI);
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link StorageClientSettings#serviceUri()} by applying
   * {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public StorageClientSettings.Builder mapServiceUri(UnaryOperator<String> mapper) {
    Objects.requireNonNull(mapper);
    return serviceUri(mapper.apply(serviceUri()));
  }

  /**
   * Returns the value that will be returned by {@link StorageClientSettings#serviceUri()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String serviceUri() {
    Preconditions.checkState(
        !_unsetProperties.contains(Property.SERVICE_URI), "serviceUri not set");
    return serviceUri;
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#endpointResolver()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code endpointResolver} is null
   */
  public StorageClientSettings.Builder endpointResolver(EndpointResolver endpointResolver) {
    this.endpointResolver = Objects.requireNonNull(endpointResolver);
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link StorageClientSettings#endpointResolver()} by
   * applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   */
  public StorageClientSettings.Builder mapEndpointResolver(UnaryOperator<EndpointResolver> mapper) {
    return endpointResolver(mapper.apply(endpointResolver()));
  }

  /**
   * Returns the value that will be returned by {@link StorageClientSettings#endpointResolver()}.
   */
  public EndpointResolver endpointResolver() {
    return endpointResolver;
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#usePlaintext()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder usePlaintext(boolean usePlaintext) {
    this.usePlaintext = usePlaintext;
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link StorageClientSettings#usePlaintext()} by applying
   * {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   */
  public StorageClientSettings.Builder mapUsePlaintext(UnaryOperator<Boolean> mapper) {
    return usePlaintext(mapper.apply(usePlaintext()));
  }

  /** Returns the value that will be returned by {@link StorageClientSettings#usePlaintext()}. */
  public boolean usePlaintext() {
    return usePlaintext;
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#clientName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code clientName} is null
   */
  public StorageClientSettings.Builder clientName(String clientName) {
    this.clientName = Objects.requireNonNull(clientName);
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#clientName()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder clientName(Optional<? extends String> clientName) {
    if (clientName.isPresent()) {
      return clientName(clientName.get());
    } else {
      return clearClientName();
    }
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#clientName()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder nullableClientName(@Nullable String clientName) {
    if (clientName != null) {
      return clientName(clientName);
    } else {
      return clearClientName();
    }
  }

  /**
   * If the value to be returned by {@link StorageClientSettings#clientName()} is present, replaces
   * it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public StorageClientSettings.Builder mapClientName(UnaryOperator<String> mapper) {
    return clientName(clientName().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#clientName()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder clearClientName() {
    clientName = null;
    return (StorageClientSettings.Builder) this;
  }

  /** Returns the value that will be returned by {@link StorageClientSettings#clientName()}. */
  public Optional<String> clientName() {
    return Optional.ofNullable(clientName);
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#statsLogger()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code statsLogger} is null
   */
  public StorageClientSettings.Builder statsLogger(StatsLogger statsLogger) {
    this.statsLogger = Objects.requireNonNull(statsLogger);
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#statsLogger()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder statsLogger(Optional<? extends StatsLogger> statsLogger) {
    if (statsLogger.isPresent()) {
      return statsLogger(statsLogger.get());
    } else {
      return clearStatsLogger();
    }
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#statsLogger()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder nullableStatsLogger(@Nullable StatsLogger statsLogger) {
    if (statsLogger != null) {
      return statsLogger(statsLogger);
    } else {
      return clearStatsLogger();
    }
  }

  /**
   * If the value to be returned by {@link StorageClientSettings#statsLogger()} is present, replaces
   * it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public StorageClientSettings.Builder mapStatsLogger(UnaryOperator<StatsLogger> mapper) {
    return statsLogger(statsLogger().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#statsLogger()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder clearStatsLogger() {
    statsLogger = null;
    return (StorageClientSettings.Builder) this;
  }

  /** Returns the value that will be returned by {@link StorageClientSettings#statsLogger()}. */
  public Optional<StatsLogger> statsLogger() {
    return Optional.ofNullable(statsLogger);
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#backoffPolicy()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code backoffPolicy} is null
   */
  public StorageClientSettings.Builder backoffPolicy(Backoff.Policy backoffPolicy) {
    this.backoffPolicy = Objects.requireNonNull(backoffPolicy);
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link StorageClientSettings#backoffPolicy()} by applying
   * {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   */
  public StorageClientSettings.Builder mapBackoffPolicy(UnaryOperator<Backoff.Policy> mapper) {
    return backoffPolicy(mapper.apply(backoffPolicy()));
  }

  /** Returns the value that will be returned by {@link StorageClientSettings#backoffPolicy()}. */
  public Backoff.Policy backoffPolicy() {
    return backoffPolicy;
  }

  /**
   * Sets the value to be returned by {@link StorageClientSettings#enableServerSideRouting()}.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder enableServerSideRouting(boolean enableServerSideRouting) {
    this.enableServerSideRouting = enableServerSideRouting;
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link StorageClientSettings#enableServerSideRouting()} by
   * applying {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   */
  public StorageClientSettings.Builder mapEnableServerSideRouting(UnaryOperator<Boolean> mapper) {
    return enableServerSideRouting(mapper.apply(enableServerSideRouting()));
  }

  /**
   * Returns the value that will be returned by {@link
   * StorageClientSettings#enableServerSideRouting()}.
   */
  public boolean enableServerSideRouting() {
    return enableServerSideRouting;
  }

  /**
   * Copies values from {@code value}, skipping defaults and empty optionals.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder mergeFrom(StorageClientSettings value) {
    StorageClientSettings_Builder defaults = StorageClientSettings.newBuilder();
    if (value.numWorkerThreads() != defaults.numWorkerThreads()) {
      numWorkerThreads(value.numWorkerThreads());
    }
    if (defaults._unsetProperties.contains(Property.SERVICE_URI)
        || !Objects.equals(value.serviceUri(), defaults.serviceUri())) {
      serviceUri(value.serviceUri());
    }
    if (!Objects.equals(value.endpointResolver(), defaults.endpointResolver())) {
      endpointResolver(value.endpointResolver());
    }
    if (value.usePlaintext() != defaults.usePlaintext()) {
      usePlaintext(value.usePlaintext());
    }
    value.clientName().ifPresent(this::clientName);
    value.statsLogger().ifPresent(this::statsLogger);
    if (!Objects.equals(value.backoffPolicy(), defaults.backoffPolicy())) {
      backoffPolicy(value.backoffPolicy());
    }
    if (value.enableServerSideRouting() != defaults.enableServerSideRouting()) {
      enableServerSideRouting(value.enableServerSideRouting());
    }
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Copies values from {@code template}, skipping defaults, empty optionals and unset properties.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder mergeFrom(StorageClientSettings.Builder template) {
    StorageClientSettings_Builder defaults = StorageClientSettings.newBuilder();
    if (template.numWorkerThreads() != defaults.numWorkerThreads()) {
      numWorkerThreads(template.numWorkerThreads());
    }
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    StorageClientSettings_Builder base = template;
    if (!base._unsetProperties.contains(Property.SERVICE_URI)
        && (defaults._unsetProperties.contains(Property.SERVICE_URI)
            || !Objects.equals(template.serviceUri(), defaults.serviceUri()))) {
      serviceUri(template.serviceUri());
    }
    if (!Objects.equals(template.endpointResolver(), defaults.endpointResolver())) {
      endpointResolver(template.endpointResolver());
    }
    if (template.usePlaintext() != defaults.usePlaintext()) {
      usePlaintext(template.usePlaintext());
    }
    template.clientName().ifPresent(this::clientName);
    template.statsLogger().ifPresent(this::statsLogger);
    if (!Objects.equals(template.backoffPolicy(), defaults.backoffPolicy())) {
      backoffPolicy(template.backoffPolicy());
    }
    if (template.enableServerSideRouting() != defaults.enableServerSideRouting()) {
      enableServerSideRouting(template.enableServerSideRouting());
    }
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Resets the state of this builder.
   *
   * @return this {@code Builder} object
   */
  public StorageClientSettings.Builder clear() {
    StorageClientSettings_Builder defaults = StorageClientSettings.newBuilder();
    numWorkerThreads = defaults.numWorkerThreads;
    serviceUri = defaults.serviceUri;
    endpointResolver = defaults.endpointResolver;
    usePlaintext = defaults.usePlaintext;
    clientName = defaults.clientName;
    statsLogger = defaults.statsLogger;
    backoffPolicy = defaults.backoffPolicy;
    enableServerSideRouting = defaults.enableServerSideRouting;
    _unsetProperties.clear();
    _unsetProperties.addAll(defaults._unsetProperties);
    return (StorageClientSettings.Builder) this;
  }

  /**
   * Returns a newly-created {@link StorageClientSettings} based on the contents of this {@code
   * Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public StorageClientSettings build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new Value(this);
  }

  /**
   * Returns a newly-created partial {@link StorageClientSettings} for use in unit tests. State
   * checking will not be performed. Unset properties will throw an {@link
   * UnsupportedOperationException} when accessed via the partial object.
   *
   * <p>The builder returned by {@link StorageClientSettings.Builder#from(StorageClientSettings)}
   * will propagate the partial status of its input, overriding {@link
   * StorageClientSettings.Builder#build() build()} to return another partial. This allows for
   * robust tests of modify-rebuild code.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  @VisibleForTesting()
  public StorageClientSettings buildPartial() {
    return new Partial(this);
  }

  private abstract static class Rebuildable implements StorageClientSettings {
    public abstract Builder toBuilder();
  }

  private static final class Value extends Rebuildable {
    private final int numWorkerThreads;
    private final String serviceUri;
    private final EndpointResolver endpointResolver;
    private final boolean usePlaintext;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String clientName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final StatsLogger statsLogger;
    private final Backoff.Policy backoffPolicy;
    private final boolean enableServerSideRouting;

    private Value(StorageClientSettings_Builder builder) {
      this.numWorkerThreads = builder.numWorkerThreads;
      this.serviceUri = builder.serviceUri;
      this.endpointResolver = builder.endpointResolver;
      this.usePlaintext = builder.usePlaintext;
      this.clientName = builder.clientName;
      this.statsLogger = builder.statsLogger;
      this.backoffPolicy = builder.backoffPolicy;
      this.enableServerSideRouting = builder.enableServerSideRouting;
    }

    @Override
    public int numWorkerThreads() {
      return numWorkerThreads;
    }

    @Override
    public String serviceUri() {
      return serviceUri;
    }

    @Override
    public EndpointResolver endpointResolver() {
      return endpointResolver;
    }

    @Override
    public boolean usePlaintext() {
      return usePlaintext;
    }

    @Override
    public Optional<String> clientName() {
      return Optional.ofNullable(clientName);
    }

    @Override
    public Optional<StatsLogger> statsLogger() {
      return Optional.ofNullable(statsLogger);
    }

    @Override
    public Backoff.Policy backoffPolicy() {
      return backoffPolicy;
    }

    @Override
    public boolean enableServerSideRouting() {
      return enableServerSideRouting;
    }

    @Override
    public Builder toBuilder() {
      StorageClientSettings_Builder builder = StorageClientSettings.newBuilder();
      builder.numWorkerThreads = numWorkerThreads;
      builder.serviceUri = serviceUri;
      builder.endpointResolver = endpointResolver;
      builder.usePlaintext = usePlaintext;
      builder.clientName = clientName;
      builder.statsLogger = statsLogger;
      builder.backoffPolicy = backoffPolicy;
      builder.enableServerSideRouting = enableServerSideRouting;
      builder._unsetProperties.clear();
      return (Builder) builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Value)) {
        return false;
      }
      Value other = (Value) obj;
      return numWorkerThreads == other.numWorkerThreads
          && Objects.equals(serviceUri, other.serviceUri)
          && Objects.equals(endpointResolver, other.endpointResolver)
          && usePlaintext == other.usePlaintext
          && Objects.equals(clientName, other.clientName)
          && Objects.equals(statsLogger, other.statsLogger)
          && Objects.equals(backoffPolicy, other.backoffPolicy)
          && enableServerSideRouting == other.enableServerSideRouting;
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          numWorkerThreads,
          serviceUri,
          endpointResolver,
          usePlaintext,
          clientName,
          statsLogger,
          backoffPolicy,
          enableServerSideRouting);
    }

    @Override
    public String toString() {
      StringBuilder result =
          new StringBuilder("StorageClientSettings{numWorkerThreads=")
              .append(numWorkerThreads)
              .append(", serviceUri=")
              .append(serviceUri)
              .append(", endpointResolver=")
              .append(endpointResolver)
              .append(", usePlaintext=")
              .append(usePlaintext);
      if (clientName != null) {
        result.append(", clientName=").append(clientName);
      }
      if (statsLogger != null) {
        result.append(", statsLogger=").append(statsLogger);
      }
      return result
          .append(", backoffPolicy=")
          .append(backoffPolicy)
          .append(", enableServerSideRouting=")
          .append(enableServerSideRouting)
          .append("}")
          .toString();
    }
  }

  private static final class Partial extends Rebuildable {
    private final int numWorkerThreads;
    private final String serviceUri;
    private final EndpointResolver endpointResolver;
    private final boolean usePlaintext;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String clientName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final StatsLogger statsLogger;
    private final Backoff.Policy backoffPolicy;
    private final boolean enableServerSideRouting;
    private final EnumSet<Property> _unsetProperties;

    Partial(StorageClientSettings_Builder builder) {
      this.numWorkerThreads = builder.numWorkerThreads;
      this.serviceUri = builder.serviceUri;
      this.endpointResolver = builder.endpointResolver;
      this.usePlaintext = builder.usePlaintext;
      this.clientName = builder.clientName;
      this.statsLogger = builder.statsLogger;
      this.backoffPolicy = builder.backoffPolicy;
      this.enableServerSideRouting = builder.enableServerSideRouting;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public int numWorkerThreads() {
      return numWorkerThreads;
    }

    @Override
    public String serviceUri() {
      if (_unsetProperties.contains(Property.SERVICE_URI)) {
        throw new UnsupportedOperationException("serviceUri not set");
      }
      return serviceUri;
    }

    @Override
    public EndpointResolver endpointResolver() {
      return endpointResolver;
    }

    @Override
    public boolean usePlaintext() {
      return usePlaintext;
    }

    @Override
    public Optional<String> clientName() {
      return Optional.ofNullable(clientName);
    }

    @Override
    public Optional<StatsLogger> statsLogger() {
      return Optional.ofNullable(statsLogger);
    }

    @Override
    public Backoff.Policy backoffPolicy() {
      return backoffPolicy;
    }

    @Override
    public boolean enableServerSideRouting() {
      return enableServerSideRouting;
    }

    private static class PartialBuilder extends Builder {
      @Override
      public StorageClientSettings build() {
        return buildPartial();
      }
    }

    @Override
    public Builder toBuilder() {
      StorageClientSettings_Builder builder = new PartialBuilder();
      builder.numWorkerThreads = numWorkerThreads;
      builder.serviceUri = serviceUri;
      builder.endpointResolver = endpointResolver;
      builder.usePlaintext = usePlaintext;
      builder.clientName = clientName;
      builder.statsLogger = statsLogger;
      builder.backoffPolicy = backoffPolicy;
      builder.enableServerSideRouting = enableServerSideRouting;
      builder._unsetProperties.clear();
      builder._unsetProperties.addAll(_unsetProperties);
      return (Builder) builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Partial)) {
        return false;
      }
      Partial other = (Partial) obj;
      return numWorkerThreads == other.numWorkerThreads
          && Objects.equals(serviceUri, other.serviceUri)
          && Objects.equals(endpointResolver, other.endpointResolver)
          && usePlaintext == other.usePlaintext
          && Objects.equals(clientName, other.clientName)
          && Objects.equals(statsLogger, other.statsLogger)
          && Objects.equals(backoffPolicy, other.backoffPolicy)
          && enableServerSideRouting == other.enableServerSideRouting
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          numWorkerThreads,
          serviceUri,
          endpointResolver,
          usePlaintext,
          clientName,
          statsLogger,
          backoffPolicy,
          enableServerSideRouting,
          _unsetProperties);
    }

    @Override
    public String toString() {
      StringBuilder result =
          new StringBuilder("partial StorageClientSettings{numWorkerThreads=")
              .append(numWorkerThreads);
      if (!_unsetProperties.contains(Property.SERVICE_URI)) {
        result.append(", serviceUri=").append(serviceUri);
      }
      result
          .append(", endpointResolver=")
          .append(endpointResolver)
          .append(", usePlaintext=")
          .append(usePlaintext);
      if (clientName != null) {
        result.append(", clientName=").append(clientName);
      }
      if (statsLogger != null) {
        result.append(", statsLogger=").append(statsLogger);
      }
      return result
          .append(", backoffPolicy=")
          .append(backoffPolicy)
          .append(", enableServerSideRouting=")
          .append(enableServerSideRouting)
          .append("}")
          .toString();
    }
  }
}
