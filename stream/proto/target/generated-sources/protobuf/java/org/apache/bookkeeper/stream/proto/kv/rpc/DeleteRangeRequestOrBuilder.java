// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv_rpc.proto

package org.apache.bookkeeper.stream.proto.kv.rpc;

public interface DeleteRangeRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bookkeeper.proto.kv.rpc.DeleteRangeRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * key is the first key to delete in the range.
   * </pre>
   *
   * <code>bytes key = 1;</code>
   * @return The key.
   */
  com.google.protobuf.ByteString getKey();

  /**
   * <pre>
   * range_end is the key following the last key to delete for the range [key, range_end).
   * If range_end is not given, the range is defined to contain only the key argument.
   * If range_end is one bit larger than the given key, then the range is all
   * the all keys with the prefix (the given key).
   * If range_end is '&#92;0', the range is all keys greater than or equal to the key argument.
   * </pre>
   *
   * <code>bytes range_end = 2;</code>
   * @return The rangeEnd.
   */
  com.google.protobuf.ByteString getRangeEnd();

  /**
   * <pre>
   * If prev_kv is set, etcd gets the previous key-value pairs before deleting it.
   * The previous key-value pairs will be returned in the delte response.
   * </pre>
   *
   * <code>bool prev_kv = 3;</code>
   * @return The prevKv.
   */
  boolean getPrevKv();

  /**
   * <pre>
   * header
   * </pre>
   *
   * <code>.bookkeeper.proto.kv.rpc.RoutingHeader header = 99;</code>
   * @return Whether the header field is set.
   */
  boolean hasHeader();
  /**
   * <pre>
   * header
   * </pre>
   *
   * <code>.bookkeeper.proto.kv.rpc.RoutingHeader header = 99;</code>
   * @return The header.
   */
  org.apache.bookkeeper.stream.proto.kv.rpc.RoutingHeader getHeader();
  /**
   * <pre>
   * header
   * </pre>
   *
   * <code>.bookkeeper.proto.kv.rpc.RoutingHeader header = 99;</code>
   */
  org.apache.bookkeeper.stream.proto.kv.rpc.RoutingHeaderOrBuilder getHeaderOrBuilder();
}
