// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

package org.apache.bookkeeper.stream.proto.storage;

/**
 * Protobuf enum {@code bookkeeper.proto.storage.StatusCode}
 */
public enum StatusCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SUCCESS = 0;</code>
   */
  SUCCESS(0),
  /**
   * <code>FAILURE = 1;</code>
   */
  FAILURE(1),
  /**
   * <pre>
   * 4xx: client errors
   * </pre>
   *
   * <code>BAD_REQUEST = 400;</code>
   */
  BAD_REQUEST(400),
  /**
   * <code>ILLEGAL_OP = 403;</code>
   */
  ILLEGAL_OP(403),
  /**
   * <pre>
   * 5xx: server errors
   * </pre>
   *
   * <code>INTERNAL_SERVER_ERROR = 500;</code>
   */
  INTERNAL_SERVER_ERROR(500),
  /**
   * <code>NOT_IMPLEMENTED = 501;</code>
   */
  NOT_IMPLEMENTED(501),
  /**
   * <pre>
   * 6xx: unexpected
   * </pre>
   *
   * <code>UNEXPECTED = 600;</code>
   */
  UNEXPECTED(600),
  /**
   * <pre>
   * 9xx: revisions, versions 
   * </pre>
   *
   * <code>BAD_VERSION = 900;</code>
   */
  BAD_VERSION(900),
  /**
   * <code>BAD_REVISION = 901;</code>
   */
  BAD_REVISION(901),
  /**
   * <pre>
   * 20xx: Namespace Related
   * </pre>
   *
   * <code>INVALID_NAMESPACE_NAME = 2000;</code>
   */
  INVALID_NAMESPACE_NAME(2000),
  /**
   * <code>NAMESPACE_EXISTS = 2001;</code>
   */
  NAMESPACE_EXISTS(2001),
  /**
   * <code>NAMESPACE_NOT_FOUND = 2002;</code>
   */
  NAMESPACE_NOT_FOUND(2002),
  /**
   * <pre>
   * 21xx: Stream Related
   * </pre>
   *
   * <code>INVALID_STREAM_NAME = 2100;</code>
   */
  INVALID_STREAM_NAME(2100),
  /**
   * <code>STREAM_EXISTS = 2101;</code>
   */
  STREAM_EXISTS(2101),
  /**
   * <code>STREAM_NOT_FOUND = 2102;</code>
   */
  STREAM_NOT_FOUND(2102),
  /**
   * <code>INVALID_STREAMSNAPSHOT_NAME = 2103;</code>
   */
  INVALID_STREAMSNAPSHOT_NAME(2103),
  /**
   * <code>STREAMSNAPSHOT_EXISTS = 2104;</code>
   */
  STREAMSNAPSHOT_EXISTS(2104),
  /**
   * <code>STREAMSNAPSHOT_NOT_FOUND = 2105;</code>
   */
  STREAMSNAPSHOT_NOT_FOUND(2105),
  /**
   * <pre>
   * 3xxx: GROUP related
   * </pre>
   *
   * <code>WRONG_GROUP_LOCATION = 3000;</code>
   */
  WRONG_GROUP_LOCATION(3000),
  /**
   * <code>INVALID_GROUP_ID = 3001;</code>
   */
  INVALID_GROUP_ID(3001),
  /**
   * <code>GROUP_EXISTS = 3002;</code>
   */
  GROUP_EXISTS(3002),
  /**
   * <code>GROUP_NOT_FOUND = 3003;</code>
   */
  GROUP_NOT_FOUND(3003),
  /**
   * <code>STALE_GROUP_INFO = 3004;</code>
   */
  STALE_GROUP_INFO(3004),
  /**
   * <pre>
   * 6xxx: Table related
   * </pre>
   *
   * <code>INVALID_KEY = 6000;</code>
   */
  INVALID_KEY(6000),
  /**
   * <code>KEY_EXISTS = 6001;</code>
   */
  KEY_EXISTS(6001),
  /**
   * <code>KEY_NOT_FOUND = 6002;</code>
   */
  KEY_NOT_FOUND(6002),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SUCCESS = 0;</code>
   */
  public static final int SUCCESS_VALUE = 0;
  /**
   * <code>FAILURE = 1;</code>
   */
  public static final int FAILURE_VALUE = 1;
  /**
   * <pre>
   * 4xx: client errors
   * </pre>
   *
   * <code>BAD_REQUEST = 400;</code>
   */
  public static final int BAD_REQUEST_VALUE = 400;
  /**
   * <code>ILLEGAL_OP = 403;</code>
   */
  public static final int ILLEGAL_OP_VALUE = 403;
  /**
   * <pre>
   * 5xx: server errors
   * </pre>
   *
   * <code>INTERNAL_SERVER_ERROR = 500;</code>
   */
  public static final int INTERNAL_SERVER_ERROR_VALUE = 500;
  /**
   * <code>NOT_IMPLEMENTED = 501;</code>
   */
  public static final int NOT_IMPLEMENTED_VALUE = 501;
  /**
   * <pre>
   * 6xx: unexpected
   * </pre>
   *
   * <code>UNEXPECTED = 600;</code>
   */
  public static final int UNEXPECTED_VALUE = 600;
  /**
   * <pre>
   * 9xx: revisions, versions 
   * </pre>
   *
   * <code>BAD_VERSION = 900;</code>
   */
  public static final int BAD_VERSION_VALUE = 900;
  /**
   * <code>BAD_REVISION = 901;</code>
   */
  public static final int BAD_REVISION_VALUE = 901;
  /**
   * <pre>
   * 20xx: Namespace Related
   * </pre>
   *
   * <code>INVALID_NAMESPACE_NAME = 2000;</code>
   */
  public static final int INVALID_NAMESPACE_NAME_VALUE = 2000;
  /**
   * <code>NAMESPACE_EXISTS = 2001;</code>
   */
  public static final int NAMESPACE_EXISTS_VALUE = 2001;
  /**
   * <code>NAMESPACE_NOT_FOUND = 2002;</code>
   */
  public static final int NAMESPACE_NOT_FOUND_VALUE = 2002;
  /**
   * <pre>
   * 21xx: Stream Related
   * </pre>
   *
   * <code>INVALID_STREAM_NAME = 2100;</code>
   */
  public static final int INVALID_STREAM_NAME_VALUE = 2100;
  /**
   * <code>STREAM_EXISTS = 2101;</code>
   */
  public static final int STREAM_EXISTS_VALUE = 2101;
  /**
   * <code>STREAM_NOT_FOUND = 2102;</code>
   */
  public static final int STREAM_NOT_FOUND_VALUE = 2102;
  /**
   * <code>INVALID_STREAMSNAPSHOT_NAME = 2103;</code>
   */
  public static final int INVALID_STREAMSNAPSHOT_NAME_VALUE = 2103;
  /**
   * <code>STREAMSNAPSHOT_EXISTS = 2104;</code>
   */
  public static final int STREAMSNAPSHOT_EXISTS_VALUE = 2104;
  /**
   * <code>STREAMSNAPSHOT_NOT_FOUND = 2105;</code>
   */
  public static final int STREAMSNAPSHOT_NOT_FOUND_VALUE = 2105;
  /**
   * <pre>
   * 3xxx: GROUP related
   * </pre>
   *
   * <code>WRONG_GROUP_LOCATION = 3000;</code>
   */
  public static final int WRONG_GROUP_LOCATION_VALUE = 3000;
  /**
   * <code>INVALID_GROUP_ID = 3001;</code>
   */
  public static final int INVALID_GROUP_ID_VALUE = 3001;
  /**
   * <code>GROUP_EXISTS = 3002;</code>
   */
  public static final int GROUP_EXISTS_VALUE = 3002;
  /**
   * <code>GROUP_NOT_FOUND = 3003;</code>
   */
  public static final int GROUP_NOT_FOUND_VALUE = 3003;
  /**
   * <code>STALE_GROUP_INFO = 3004;</code>
   */
  public static final int STALE_GROUP_INFO_VALUE = 3004;
  /**
   * <pre>
   * 6xxx: Table related
   * </pre>
   *
   * <code>INVALID_KEY = 6000;</code>
   */
  public static final int INVALID_KEY_VALUE = 6000;
  /**
   * <code>KEY_EXISTS = 6001;</code>
   */
  public static final int KEY_EXISTS_VALUE = 6001;
  /**
   * <code>KEY_NOT_FOUND = 6002;</code>
   */
  public static final int KEY_NOT_FOUND_VALUE = 6002;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static StatusCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static StatusCode forNumber(int value) {
    switch (value) {
      case 0: return SUCCESS;
      case 1: return FAILURE;
      case 400: return BAD_REQUEST;
      case 403: return ILLEGAL_OP;
      case 500: return INTERNAL_SERVER_ERROR;
      case 501: return NOT_IMPLEMENTED;
      case 600: return UNEXPECTED;
      case 900: return BAD_VERSION;
      case 901: return BAD_REVISION;
      case 2000: return INVALID_NAMESPACE_NAME;
      case 2001: return NAMESPACE_EXISTS;
      case 2002: return NAMESPACE_NOT_FOUND;
      case 2100: return INVALID_STREAM_NAME;
      case 2101: return STREAM_EXISTS;
      case 2102: return STREAM_NOT_FOUND;
      case 2103: return INVALID_STREAMSNAPSHOT_NAME;
      case 2104: return STREAMSNAPSHOT_EXISTS;
      case 2105: return STREAMSNAPSHOT_NOT_FOUND;
      case 3000: return WRONG_GROUP_LOCATION;
      case 3001: return INVALID_GROUP_ID;
      case 3002: return GROUP_EXISTS;
      case 3003: return GROUP_NOT_FOUND;
      case 3004: return STALE_GROUP_INFO;
      case 6000: return INVALID_KEY;
      case 6001: return KEY_EXISTS;
      case 6002: return KEY_NOT_FOUND;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<StatusCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      StatusCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<StatusCode>() {
          public StatusCode findValueByNumber(int number) {
            return StatusCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.apache.bookkeeper.stream.proto.storage.Storage.getDescriptor().getEnumTypes().get(0);
  }

  private static final StatusCode[] VALUES = values();

  public static StatusCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private StatusCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:bookkeeper.proto.storage.StatusCode)
}

